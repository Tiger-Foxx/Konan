using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace Konan.Models;

/// <summary>
/// Repr√©sente un √©l√©ment copi√© dans le presse-papiers
/// ü¶ä Chaque souvenir de notre renard m√©ditatif !
/// </summary>
public class ClipboardItem
{
    /// <summary>
    /// Identifiant unique de l'√©l√©ment
    /// </summary>
    public string Id { get; set; } = Guid.NewGuid().ToString();

    /// <summary>
    /// Type de contenu
    /// </summary>
    public ClipboardItemType Type { get; set; }

    /// <summary>
    /// Contenu principal (texte, chemin d'image, etc.)
    /// </summary>
    public string Content { get; set; } = string.Empty;

    /// <summary>
    /// Contenu format√© (pour le RTF, HTML, etc.)
    /// </summary>
    public string? FormattedContent { get; set; }

    /// <summary>
    /// M√©tadonn√©es suppl√©mentaires (taille fichier, dimensions image, etc.)
    /// </summary>
    public Dictionary<string, object> Metadata { get; set; } = new();

    /// <summary>
    /// Date et heure de cr√©ation
    /// </summary>
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// Nombre de fois que l'√©l√©ment a √©t√© utilis√©
    /// </summary>
    public int UsageCount { get; set; } = 0;

    /// <summary>
    /// Derni√®re utilisation
    /// </summary>
    public DateTime? LastUsedAt { get; set; }

    /// <summary>
    /// Taille en octets (pour les fichiers et images)
    /// </summary>
    public long SizeInBytes { get; set; } = 0;

    /// <summary>
    /// Chemin vers le fichier de pr√©visualisation (pour les images)
    /// </summary>
    public string? PreviewPath { get; set; }

    /// <summary>
    /// Indique si l'√©l√©ment est favori
    /// </summary>
    public bool IsFavorite { get; set; } = false;

    /// <summary>
    /// Tags personnalis√©s pour l'organisation
    /// </summary>
    public List<string> Tags { get; set; } = new();

    /// <summary>
    /// Aper√ßu textuel pour la recherche (r√©sum√© du contenu)
    /// </summary>
    public string SearchablePreview { get; set; } = string.Empty;

    /// <summary>
    /// Marque l'√©l√©ment comme utilis√©
    /// ü¶ä Notre renard se souvient de ses pr√©f√©rences !
    /// </summary>
    public void MarkAsUsed()
    {
        UsageCount++;
        LastUsedAt = DateTime.UtcNow;
    }

    /// <summary>
    /// Obtient un aper√ßu court du contenu pour l'affichage
    /// </summary>
    [JsonIgnore]
    public string DisplayPreview
    {
        get
        {
            return Type switch
            {
                ClipboardItemType.Text or ClipboardItemType.RichText => 
                    Content.Length > 100 ? Content[..97] + "..." : Content,
                ClipboardItemType.Image => $"Image ({Metadata.GetValueOrDefault("Width", "?")}x{Metadata.GetValueOrDefault("Height", "?")})",
                ClipboardItemType.Files => $"{Metadata.GetValueOrDefault("FileCount", 1)} fichier(s)",
                _ => "Contenu inconnu"
            };
        }
    }

    /// <summary>
    /// Obtient l'ic√¥ne appropri√©e pour le type de contenu
    /// </summary>
    [JsonIgnore]
    public string IconPath
    {
        get
        {
            return Type switch
            {
                ClipboardItemType.Text => "üìù",
                ClipboardItemType.RichText => "üìÑ",
                ClipboardItemType.Image => "üñºÔ∏è",
                ClipboardItemType.Files => "üìÅ",
                _ => "‚ùì"
            };
        }
    }
}